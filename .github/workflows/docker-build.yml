name: Build V-Rising Server Docker Images

on:
  push:
    branches:
      - dev
      - main
    paths:
      - 'Dockerfile'
      - '.github/workflows/**'
  pull_request:
    branches:
      - dev
      - main
    paths:
      - 'Dockerfile'
      - '.github/workflows/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY_IMAGE: ghcr.io/${{ github.repository_owner }}/docker-vrising-server
  BASE_REGISTRY_IMAGE: ghcr.io/${{ github.repository_owner }}/docker-steamcmd-server
  MATRIX_BASE_TAGS: |
    bookworm
  MATRIX_PLATFORMS: |
    linux/amd64
    linux/arm64

jobs:
  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      base-tags: ${{ steps.set-matrix.outputs.base-tags }}
      platforms: ${{ steps.set-matrix.outputs.platforms }}
    steps:
      - id: set-matrix
        name: Process matrix configurations
        run: |
          BASE_TAGS=$(echo '${{ env.MATRIX_BASE_TAGS }}' | grep -v '^$' | awk '{print "\""$0"\""}' | paste -sd, | awk '{print "["$0"]"}')
          PLATFORMS=$(echo '${{ env.MATRIX_PLATFORMS }}' | grep -v '^$' | awk '{print "\""$0"\""}' | paste -sd, | awk '{print "["$0"]"}')
          echo "base-tags=$BASE_TAGS" >> $GITHUB_OUTPUT
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT

  build:
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        base_tag: ${{ fromJson(needs.setup.outputs.base-tags) }}
        platform: ${{ fromJson(needs.setup.outputs.platforms) }}
      fail-fast: false

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.platform }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Prepare tag and build arguments
        id: prep-vars
        run: |
          ARCHITECTURE=$(echo ${{ matrix.platform }} | cut -d'/' -f2)
          echo "ARCHITECTURE=$ARCHITECTURE" >> $GITHUB_ENV

          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            BASE_BRANCH_SUFFIX="_dev"
          else
            BASE_BRANCH_SUFFIX=""
          fi
          
          # This is the tag for the base image we are pulling
          # Example: bookworm-wine-staging-9.13_dev-amd64
          BASE_IMAGE_TAG="${{ matrix.base_tag }}-wine-staging-9.13${BASE_BRANCH_SUFFIX}-${ARCHITECTURE}"
          echo "BASE_IMAGE_TAG=${BASE_IMAGE_TAG}" >> $GITHUB_ENV

          # These are the tags for the new v-rising image we are building
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "VERSIONED_TAG=${{ matrix.base_tag }}-$ARCHITECTURE" >> $GITHUB_ENV
            if [[ "${{ matrix.base_tag }}" == "bookworm" ]]; then
              echo "LATEST_ARCH_TAG=latest-$ARCHITECTURE" >> $GITHUB_ENV
            fi
          else
            echo "VERSIONED_TAG=${{ matrix.base_tag }}_dev-$ARCHITECTURE" >> $GITHUB_ENV
          fi
          
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,value=${{ env.VERSIONED_TAG }}
            ${{ env.LATEST_ARCH_TAG != '' && format('type=raw,value={0}', env.LATEST_ARCH_TAG) || '' }}
          labels: |
            org.opencontainers.image.title=V-Rising Server Docker Image
            org.opencontainers.image.description=Docker image for V-Rising dedicated server using Wine.
            org.opencontainers.image.vendor=TeriyakiDactyl
            org.opencontainers.image.version=${{ github.ref_name }}
            org.opencontainers.image.created=${{ env.BUILD_DATE }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BASE_TAG=${{ env.BASE_IMAGE_TAG }}
            SOURCE_COMMIT=${{ github.sha }}
            BUILD_DATE=${{ env.BUILD_DATE }}
            WINE_VERSION=9.13
          platforms: ${{ matrix.platform }}
          cache-from: type=gha,scope=${{ matrix.base_tag }}-${{ matrix.platform }}
          cache-to: type=gha,scope=${{ matrix.base_tag }}-${{ matrix.platform }},mode=max

  create-manifest:
    needs: [setup, build]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        base_tag: ${{ fromJson(needs.setup.outputs.base-tags) }}
    
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}
          
      - name: Generate manifest tag names
        id: manifest-tags
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "MANIFEST_TAG=${{ matrix.base_tag }}" >> $GITHUB_ENV
            if [[ "${{ matrix.base_tag }}" == "bookworm" ]]; then
              echo "LATEST_TAG=latest" >> $GITHUB_ENV
              echo "HAS_LATEST_TAG=true" >> $GITHUB_ENV
            fi
          else
            echo "MANIFEST_TAG=${{ matrix.base_tag }}_dev" >> $GITHUB_ENV
            echo "HAS_LATEST_TAG=false" >> $GITHUB_ENV
          fi
      
      - name: Create and push multi-architecture manifests
        run: |
          docker buildx imagetools create --tag ${{ env.REGISTRY_IMAGE }}:${{ env.MANIFEST_TAG }} \
            ${{ env.REGISTRY_IMAGE }}:${{ matrix.base_tag }}${{ github.ref == 'refs/heads/main' && '' || '_dev' }}-amd64 \
            ${{ env.REGISTRY_IMAGE }}:${{ matrix.base_tag }}${{ github.ref == 'refs/heads/main' && '' || '_dev' }}-arm64
          
          echo "::notice::Successfully created manifest for ${{ env.REGISTRY_IMAGE }}:${{ env.MANIFEST_TAG }}"
          
          if [[ "${{ env.HAS_LATEST_TAG }}" == "true" ]]; then
            docker buildx imagetools create --tag ${{ env.REGISTRY_IMAGE }}:${{ env.LATEST_TAG }} \
              ${{ env.REGISTRY_IMAGE }}:latest-amd64 \
              ${{ env.REGISTRY_IMAGE }}:latest-arm64
              
            echo "::notice::Successfully created 'latest' multi-architecture manifest"
          fi
